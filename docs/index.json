[
{
	"uri": "/",
	"title": "AWS WAF Automation LAB",
	"tags": [],
	"description": "",
	"content": "본 실습 프로그램은 AWS의 웹방화벽(WAF) 서비스를 이용하여 취약한 웹 서비스에 대한 공격과 이를 방어하기 위한 AWS WAF의 구성을 실습할 수 있도록 교재를 제공하는데 그 목표를 두고 있습니다.\n  Report an issue   Learn more  "
},
{
	"uri": "/post/_module1.html",
	"title": "AWS 자원 삭제",
	"tags": [],
	"description": "",
	"content": " 본 실습 과정에서 사용된 AWS 자원은 크게 2가지 유형으로 생성되었습니다. 하나는 CloudFormation 을 통하여 자동으로 생성되었고 하나는 Web ACL 로 여러분들이 각각 수작업으로 생성이 되었습니다. 따라서, 실습에 사용된 AWS 자원을 삭제하려면 사용된 CloudFormation 을 삭제하고 Web ACL 을 삭제하셔야 합니다.\n1. Web ACL 삭제 Web ACL 을 삭제하기 위해서는 먼저 Web ACL 과 연결되어 있는 AWS Resource 를 제거하여야 합니다. 실습 과정에서 ALB 와의 연결을 설정하였으므로 ALB 와의 연결을 삭제하도록 하겠습니다. ALB 연결을 제거하기 위하여 Web ACL 메뉴의 \u0026ldquo;Associated AWS resources\u0026rdquo; 를 클릭한 후 실습에 사용된 ALB 를 선택합니다. 선택된 ALB 를 삭제하기 위하여 \u0026ldquo;Remove\u0026rdquo; 버튼을 클릭합니다. 아래와 같이 경고창이 나타나면 \u0026ldquo;delete\u0026rdquo; 를 입력한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다. 이제 Web ACL 과 연결되어 있는 ALB 를 삭제하였으므로 Web ACL 을 삭제할 수 있습니다. Web ACL 을 삭제하기 위하여 Web ACL 의 기본 메뉴에서 아래와 같이 실습에 사용된 Web ACL 을 선택한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다. 아래와 같이 경고창이 나타나면 \u0026ldquo;delete\u0026rdquo; 를 입력한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다. 모든 과정을 정상적으로 진행하였다면 아래와 같이 Web ACL 이 삭제된 것을 확인할 수 있습니다. 2. CloudFormation 삭제 CloudFormation 관리 콘솔에 접속한 후 DVWA 생성에 사용되었던 CloudFormation 을 삭제합니다.\n아래와 같이 실습에 사용된 CloudFormation 을 선택한 후 \u0026ldquo;삭제\u0026rdquo; 버튼을 클릭합니다. 삭제를 확인하는 경고창이 나타나면 \u0026ldquo;스택 삭제\u0026rdquo; 버튼을 클릭합니다. CloudFormation 삭제에는 시간이 소요됩니다. 몇 분이 흐른 후 CloudFormation 이 정상적으로 삭제되었음을 확인하시기 바랍니다.\n 이제 모든 실습 과정이 종료되었습니다. 수고하셨습니다!! "
},
{
	"uri": "/attack/_module1.html",
	"title": "DVWA 환경 설정",
	"tags": [],
	"description": "",
	"content": "본 실습에서 생성된 DVWA 서버는 기본적으로 주요 취약점을 사용할 수 없는 환경으로 설정이 되어 있습니다. 따라서, 실습 진행과정에서 공격을 쉽게 수행하기 위해서는 DVWA 의 Security Level 설정을 변경해주어야 합니다. DVWA 에 접속한 후 다음과 같이 화면 하단의 \u0026ldquo;DVWA Security\u0026rdquo; 메뉴를 클릭합니다.\nDVWA Security 화면으로 이동한 후 화면 중간의 Pull Down 메뉴에서 기본값으로 설정되어 있는 \u0026ldquo;Impossible\u0026rdquo; 을 \u0026ldquo;Low\u0026rdquo; 로 변경한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n"
},
{
	"uri": "/module.html",
	"title": "LAB Modules",
	"tags": [],
	"description": "",
	"content": "본 AWS WAF 실습은 아래의 각 절차에 따라 수행됩니다..\n 사전 준비 공격 및 방어 랩 구성 요소 삭제    Report an issue   Learn more  "
},
{
	"uri": "/attack/_module2.html",
	"title": "SQL Injection",
	"tags": [],
	"description": "",
	"content": "실제로 발생하는 다양한 웹 서비스 공격방식 중 하나인 SQL Injection 공격을 진행하도록 하겠습니다. SQL Injection 공격을 진행하기 위하여 DVWA 메뉴에서 아래와 같이 \u0026ldquo;SQL Injectin\u0026rdquo; 메뉴를 클릭한 후 우측의 \u0026ldquo;User ID\u0026rdquo; 를 입력하는 화면에서 아래의 SQL 구문을 입력한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n ' OR 1=1 #  위 공격에 사용되는 특수문자는 \u0026ldquo;`\u0026rdquo; 입니다. 코드를 직접 입력했는데 공격이 성공되지 않으시는 분들은 위 코드를 그대로 복사하셔서 사용하시기 바랍니다.\n \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭한 후 아래 화면과 같이 여러가지 계정 정보가 출력되는 것을 확인합니다. 본 실습에서 사용한 SQL 구문은 SQL Injection 공격에 사용되는 가장 기본적인 구문 중 하나입니다. 현재 사용되는 대부분의 웹 서비스는 이와 같은 간단한 SQL 구문에 대해서는 취약점이 없을 것으로 예상되지만 테스트 목적 이외의 악의적인 사용해서는 안되며 해당 행위로 인한 책임은 사용자에게 있음을 밝힙니다.\n "
},
{
	"uri": "/mitigation/_module1.html",
	"title": "Web ACL 생성",
	"tags": [],
	"description": "",
	"content": "이번에는 웹 공격을 방어하기 위하여 AWS WAF 를 구성해보도록 하겠습니다.\nAWS WAF 를 구성하는 방법은 여러가지가 있지만 본 실습에서는 Web ACL 을 먼저 생성한 후 각 공격 유형별로 Rule 을 생성하여 Web ACL 에 추가하는 방법을 따르도록 하겠습니다.\n현재 AWS WAF 는 기존에 제공되던 AWS WAF 메뉴와 함께 새로운 AWS WAF v2 메뉴가 제공되고 있습니다. 본 실습에서는 AWS WAF v2 를 기준으로 진행되기 때문에 반드시 새로운 AWS WAF 메뉴를 선택하신 후 진행하시기 바랍니다.\n 아래와 같이 AWS WAF 메뉴에서 Web ACL 을 선택한 후 \u0026ldquo;Create Web ACL\u0026rdquo; 버튼을 클릭합니다. 먼저 화면 중간의 \u0026ldquo;Resource Type\u0026rdquo; 을 \u0026ldquo;Regional Resources\u0026rdquo; 로 선택한 후 \u0026ldquo;Region\u0026rdquo; 을 \u0026ldquo;Asia Pacific(Seoul)\u0026rdquo; 로 선택하시기 바랍니다. Region 선택이 끝나신 후 \u0026ldquo;Name\u0026rdquo; 에 적당한 이름을 입력하시기 바랍니다. \u0026ldquo;Name\u0026rdquo; 을 입력한 후 TAB 을 누르시면 \u0026ldquo;Cloudwatch Metric Name\u0026rdquo; 이 Web ACL Name 과 동일한 이름으로 자동입력 됩니다. 생성되는 WebACL 에 리소스를 할당하기 위하여 \u0026ldquo;Add AWS Resources\u0026rdquo; 버튼을 클릭합니다. \u0026ldquo;Add AWS Resources\u0026rdquo; 화면에서 이전 과정에서 생성되었던 ALB 를 선택한 후 \u0026ldquo;Add\u0026rdquo; 버튼을 클릭합니다. 아래와 같이 ALB 가 정상적으로 추가된 것을 확인한 후 \u0026ldquo;Next\u0026rdquo; 버튼을 클릭합니다. Rule 설정은 이후 과정에서 진행할 것이므로 그대로두고 화면 하단의 \u0026ldquo;Default Action\u0026rdquo; 이 \u0026ldquo;Allow\u0026rdquo; 로 되어 있는 것을 확인한 후 \u0026ldquo;Next\u0026rdquo; 버튼을 클릭합니다. 설정된 Rule 없으므로 \u0026ldquo;Set Rule Priority\u0026rdquo; 에서 \u0026ldquo;Next\u0026rdquo; 를 클릭합니다. \u0026ldquo;Configure Metrics\u0026rdquo; 에서도 \u0026ldquo;Next\u0026rdquo; 를 클릭합니다. 지금까지 설정한 내용이 모두 맞는지 확인한 후 \u0026ldquo;Create Web ACL\u0026rdquo; 버튼을 클릭합니다. 정상적으로 진행되었다면 아래 화면과 같이 새로운 Web ACL 이 생성되는 것을 확인할 수 있습니다. "
},
{
	"uri": "/pre/_module1.html",
	"title": "실습 안내",
	"tags": [],
	"description": "",
	"content": " AWS WAF는 일반적인 웹 취약점 공격으로부터 웹 애플리케이션을 보호하는 데 도움이 되는 웹 애플리케이션 방화벽입니다. AWS WAF를 사용하면 사용자 정의 가능한 웹 보안 규칙을 정의함으로써 어떤 트래픽에 웹 애플리케이션에 대한 엑세스를 허용하거나 차단할지 제어할 수 있습니다. AWS WAF는 SQL 명령어 주입이나 교차 사이트 스크립팅 등 공격 패턴을 차단하는 사용자 지정 규칙과 특정 애플리케이션을 위해 설계된 규칙을 생성할 수 있습니다. EC2 상에서 작동하는 웹 서버 앞의 ALB (Application Load Balancer)나 CDN 서비스인 CloudFront 중 하나에 AWS WAF를 배포할 수 있습니다.\n이번 실습에서는 위협 요인이 내재된 인프라 환경 (로드밸런서-웹/데이터베이스 서버)을 구성하고, 몇 가지 취약점을 확인합니다. 이후 AWS WAF를 해당 시스템에 적용하고, SQL Injection, XSS (Cross Site Scripting) 등의 공격을 차단하는 실습을 진행합니다.\n실습은 서울 리전(Seoul Region, ap-northeast-2)에서 진행되며, 약 90분 정도의 시간에 맞춰 구성되었고, AWS에 경험이 있으신 분들은 더 빠른 시간 내에 실습을 완료하실 수 있습니다.\n① 위협 요인이 내재된 인프라 환경을 구성하기 위해 CloudFormation 템플릿을 실행합니다. 템플릿 실행을 통해 생성되는 리소스는 VPC (Virtual Private Cloud), ALB (Application Load Balancer), EC2인스턴스 (Linux, Apache, MySQL, PHP) 등 입니다.\n② AWS WAF가 적용되지 않은 환경에서 웹 취약점 (SQL Injection, XSS)을 확인합니다.\n③ AWS WAF와 미리 설정된 WebACLs (Rules, Conditions)을 생성하기 위해 CloudFormation 템플릿을 실행합니다. 템플릿 실행을 통해서 WebACL 1개, Rules 9개, 그리고 다수의 Conditions이 생성됩니다.\n④ AWS WAF의 ACLs이 생성된 후에는 WAF ACL과 ALB에 연결 (Association)합니다.\n⑤ AWS WAF가 적용된 상태에서 1) SQL Injection, 2) XSS, 3) Bad bot 공격 차단 테스트를 수행합니다. 이후, Chrome Extention( User-Agent, VPN)을 설치하고, 4) Geo (지역) 5) String Maching 등의 차단 테스트를 수행합니다.\n⑥ 실습이 끝난 후 CloudFormation을 삭제합니다.\n실습을 통해 생성되는 AWS 자원    AWS 서비스 유형 리소스명 기타     EC2 인스턴스 WAFLab-WebServerInstance t2.micro   ALB MyDVW-Applica… -   VPC VPC 10.10.0.0/16   VPC Subnet PublicSubnet 10.10.0.0/18   VPC Subnet PrivateSubnet 10.10.64.0/18   WAF WebACLs WAFRule -   기타 서비스 Elastic IP, Route table, Security Groups, Network ACL, IAM Role 등     사전 준비 단계에서 사용되는 CloudFormation 에서는 아래와 같은 AWS 리소스를 생성하여 실습 환경을 구성합니다. "
},
{
	"uri": "/pre.html",
	"title": "실습 개요",
	"tags": [],
	"description": "",
	"content": " 이 랩에서는 웹 취약점을 포함하고 있는 웹서버를 이용하여 실제 공격에 사용되고 있는 공격 방법을 이용하여 해당 웹서버에 대한 공격을 수행하고 공격 결과를 확인합니다. 랩 과정 중에 사용된 각 공격은 대상 웹서버 환경에 따라 악의적으로 사용될 수 있으므로 랩 이외의 환경에서는 사용하지 않아야하며 해당 공격 방법 사용에 따른 책임은 사용자에 있습니다. 랩 과정에 사용된 웹 어플리케이션은 DVWA 이며 오픈소스 형태로 제공되는 무료 웹 취약점에 대한 공격 및 방어 기술에 대한 교육용으로 사용되는 어플리케이션입니다.  "
},
{
	"uri": "/mitigation/_module2.html",
	"title": "SQL Injection 공격 차단",
	"tags": [],
	"description": "",
	"content": "Web ACL 에 Rule 을 적용하기 위해서는 Rule 이나 Rule Group 을 생성하여야 합니다. 관리자는 적용하고자 하는 목적에 따라 3rd Party 파트너가 제공하는 관리형 Rule Group 을 사용하거나 AWS 가 관리하는 AWS Managed Rule 을 사용할 수도 있습니다. 이 실습에서는 Managed Rule 이나 Rule Group 을 사용하지 않고 공격 타입별로 각각의 Rule 을 생성한 후 Web ACL 에 적용하도록 하겠습니다.\n 실습에 사용할 새로운 Rule 을 Web ACL 에 추가하기 위하여 좌측의 AWS WAF 메뉴에서 Web ACL 을 선택합니다. 리전이 \u0026ldquo;Asia Pacific(Seoul)\u0026rdquo; 로 선택되어 있는 것을 확인한 후 하단의 Web ACL 리스트 중 이전 과정에서 생성한 Web ACL 을 클릭합니다.  Web ACL 메뉴를 클릭하면 선택되어 있는 리전이 Seoul Region 이 아닐 수도 있으므로 반드시 확인하시기 바랍니다.\n  선택한 Web ACL 의 상세 화면 중 상단의 \u0026ldquo;Rules\u0026rdquo; 를 선택한 후 화면 우측의 \u0026ldquo;Add rules\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 클릭하면 하위 메뉴를 확인할 수 있는데 하위 메뉴 중 \u0026ldquo;Add my own rules and rule groups\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 선택하면 새로운 WAF Rule 을 생성하거나 미리 만들어 둔 Rule Group 을 Web ACL 에 추가할 수 있습니다.  새로운 Rule 을 생성하기 위하여 다음과 같이 여러 옵션들을 정의합니다. 아래 4가지를 제외한 나머지는 모두 기본값으로 선택합니다.\n Name = 임의의 이름 입력 Inspect = All query parameters 선택 Match Type = Contains SQL Injection Attacks 선택 Text Transformation = URL decode 선택   생성하려고하는 Rule 의 Default Action 이 Block 인 것을 확인한 후 \u0026ldquo;Add Rule\u0026rdquo; 버튼을 클릭합니다.  정상적으로 진행되는 경우 아래와 같이 새로운 Rule 생성이 되고 \u0026ldquo;Set rule priority\u0026rdquo; 화면으로 진행이 되게 되는데 별도의 Priority 설정이 필요 없으므로 \u0026ldquo;Save\u0026rdquo; 버튼을 클릭합니다.  Web ACLs 화면에서 \u0026ldquo;Rules\u0026rdquo; 탭을 클릭하여 새로운 Rule 이 생성된 것을 확인합니다. 아래 화면과 같이 생성된 Rule 이 40 WCU 을 점유하는 것을 확인합니다.  이제 SQL 공격을 차단할 수 있는 Rule 이 Web ACL 에 추가되었으므로 이전 과정에서 실행했던 SQL Injection 공격을 DVWA 화면에서 실행해보도록 하겠습니다.\n ALB DNS 주소를 통해 DVWA 화면에 접속한 후 이전 과정과 동일하게 SQL Injection(Reflected) 메뉴에서 아래의 SQL Injection 구문을 입력한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n' OR 1=1 #    모든 설정이 정상적으로 이뤄졌다면 아래와 같이 이전 과정에서 차단되지 않았던 SQL Injection 구문이 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.   "
},
{
	"uri": "/attack/_module3.html",
	"title": "XSS Exploit",
	"tags": [],
	"description": "",
	"content": "실제로 발생하는 다양한 웹 서비스 공격방식 중 하나인 XSS Exploit 공격을 진행하도록 하겠습니다. XSS Exploit 공격을 진행하기 위하여 DVWA 메뉴에서 아래와 같이 \u0026ldquo;XSS(Reflected)\u0026rdquo; 메뉴를 클릭한 후 우측의 \u0026ldquo;User ID\u0026rdquo; 를 입력하는 화면에서 아래의 XSS 코드를 입력한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;  \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭하면 아래와 같이 경고창이 나타나며 경고창에는 쿠키 정보가 포함되어 있는 것을 확인할 수 있습니다. 이 경고창은 조금 전 입력한 XSS 코드에 의하여 생성된 것으로 취약한 시스템에서의 쿠키 정보를 탈취하는 것을 손쉽게 시연하기 위하여 경고창이 사용되었습니다.\n경고창의 \u0026ldquo;OK\u0026rdquo; 버튼을 클릭하면 아래와 같이 XSS (Reflected)화면에 Hello 라는 문자가 출력된 것을 확인할 수 있습니다.\n참고로 DVWA 웹페이지의 XSS(Reflected)취약점에 적용된 소스코드는 다음과 같습니다.\n\u0026lt;?php header (\u0026quot;X-XSS-Protection: 0\u0026quot;); // Is there any input? if( array_key_exists( \u0026quot;name\u0026quot;, $_GET ) \u0026amp;\u0026amp; $_GET[ 'name' ] != NULL ) { // Feedback for end user echo '\u0026lt;pre\u0026gt;Hello ' . $_GET[ 'name' ] . '\u0026lt;/pre\u0026gt;'; } ?\u0026gt;  본 실습에서 사용한 SQL 구문은 XSS 공격에 사용되는 가장 기본적인 구문 중 하나입니다. 현재 사용되는 대부분의 웹 서비스는 이와 같은 간단한 XSS 코드에 대해서는 취약점이 없을 것으로 예상되지만 테스트 목적 이외의 악의적인 사용해서는 안되며 해당 행위로 인한 책임은 사용자에게 있음을 밝힙니다.\n "
},
{
	"uri": "/attack.html",
	"title": "공격",
	"tags": [],
	"description": "",
	"content": " CloudFormation 을 통해 생성된 DVWA 웹 서버를 이용하여 웹 공격을 실습해보도록 하겠습니다. 공격방식은 일반적으로 웹 공격에 많이 사용되는 SQL Injection 공격과 XSS 공격을 사용하도록 하겠습니다.  "
},
{
	"uri": "/pre/_module2.html",
	"title": "DVWA 설치",
	"tags": [],
	"description": "",
	"content": " 취약한 웹 서비스 환경 구성 이번 단계에서는 위협 요인이 내재된 환경을 구성하기 위해 CloudFormation을 실행합니다. CloudFormation을 통해 생성되는 리소스는 VPC (Virtual Private Cloud), ALB (Application Load Balancer), EC2인스턴스 (Linux, Apache, MySQL, PHP) 등 입니다.\n AWS 리전 확인\na. 이번 실습은 AWS 서울 (Seoul) 리전에서 수행됩니다.\nb. AWS 관리 콘솔로 접속해서, 아래의 화면과 같이 AWS 서울 리전이 선택되었는지 확인합니다.  Open AWS Console    본 실습 의 모든 과정은 서울 리전에서 이루어집니다. 원활한 실습 진행을 위해서 반드시 서울 리전이 선택되었는지를 확인하시기 바랍니다.\n  EC2 키페어 생성 (이미 생성된 경우 이 단계 생략)\na. EC2 키페어는 EC2인스턴스 생성을 위해 필요한 항목이므로, CloudFormation 템플릿을 실행하기에 앞서 EC2 키페어를 생성합니다.\nb. 이미 EC2 키페어가 생성된 경우라면, 이 단계를 생략합니다. EC2 키페어가 없다면 EC2 콘솔로 접속하여 키페어를 생성합니다.\nc. EC2 콘솔 화면의 좌측 메뉴에서 “키 페어”를 클릭하고 “키 페어 생성” 버튼을 클릭합니다.\nd. “키 페어 이름”에 “waf-lab-seoul”를 입력한 후, “생성”을 클릭합니다.\ne. 이후 “waf-lab-seoul.pem” 파일을 임의의 폴더에 다운로드합니다.\n   CloudFormation 템플릿 실행\na. CloudFormation은 템플릿 파일 (json, yml)에 EC2 인스턴스, 네트워크 구성 등의 클라우드 인프라 리소스를 모델링하고 클라우드 환경에서 프로비저닝할 수 있는 서비스입니다.\nb. CloudFormation 템플릿을 실행하기 위해 링크를 클릭합니다. 링크를 클릭하면 아래와 같은 화면이 표시됩니다.\n  * 템플릿 생성에 사용된 스택 이름, 파라미터, KeyName, SSHLocation 등은 필요에 따라 수정이 가능합니다. 다만, 원활한 진행을 위하여 가급적 기본값을 사용하시기를 권고드립니다.\n\u0026ldquo;스택 생성\u0026rdquo; 버튼을 클릭하면 아래와 같은 화면이 나타나게 됩니다. Tag 값을 설정하시려면 원하는 Tag 값을 입력하시고 Tag 가 필요없는 경우 \u0026ldquo;다음\u0026rdquo; 버튼을 클릭합니다. 스택 생성을 위하여 사용된 템플릿의 설정값을 확인한 후 \u0026ldquo;스택 생성\u0026rdquo; 버튼을 클릭합니다. 정상적으로 진행이 되는 경우 아래와 같이 스택의 상태가 \u0026ldquo;CREATE_COMPLETE)으로 되어 있는 것을 확인하실 수 있습니다. DVWA 생성에 사용된 템플릿은 별도의 VPC 와 EIP 등을 추가로 생성하므로 기존에 사용하던 계정에 VPC 나 EIP 의 수가 한계에 도달한 경우 스택 생성이 실패하게 됩니다.\n DVWA 웹 페이지 접속 확인 DVWA 스택이 정상적으로 생성되었다면 템플릿을 통하여 생성된 DVWA 웹페이지에 정상적으로 접속이 되는지 확인해보도록 하겠습니다.\nAWS Management Console 의 EC2 메뉴하단에 새로운 ALB (Application Load Balancer)가 생성된 것을 확인한 후 해당 ALB 의 DNS 이름을 이용하여 인터넷 브라우져에서 접속합니다. 아래와 같이 DVWA 의 로그인 페이지로 접속이 가능한 것을 확인합니다. \u0026ldquo;ID = admin\u0026rdquo;, \u0026ldquo;Password = password\u0026rdquo; 를 입력하고 다음과 같이 DVWA 에 정상적으로 로그인이 되는 것을 확인합니다. "
},
{
	"uri": "/mitigation/_module3.html",
	"title": "XSS 공격 차단",
	"tags": [],
	"description": "",
	"content": "이번에는 XSS 공격을 차단할 수 있는 Rule 을 생성하여 Web ACL 에 추가하도록 하겠습니다.\n 실습에 사용할 새로운 Rule 을 Web ACL 에 추가하기 위하여 좌측의 AWS WAF 메뉴에서 Web ACL 을 선택합니다. 리전이 \u0026ldquo;Asia Pacific(Seoul)\u0026rdquo; 로 선택되어 있는 것을 확인한 후 하단의 Web ACL 리스트 중 이전 과정에서 생성한 Web ACL 을 클릭합니다.  Web ACL 메뉴를 클릭하면 선택되어 있는 리전이 Seoul Region 이 아닐 수도 있으므로 반드시 확인하시기 바랍니다.\n  선택한 Web ACL 의 상세 화면 중 상단의 \u0026ldquo;Rules\u0026rdquo; 를 선택한 후 화면 우측의 \u0026ldquo;Add rules\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 클릭하면 하위 메뉴를 확인할 수 있는데 하위 메뉴 중 \u0026ldquo;Add my own rules and rule groups\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 선택하면 새로운 WAF Rule 을 생성하거나 미리 만들어 둔 Rule Group 을 Web ACL 에 추가할 수 있습니다.  새로운 Rule 을 생성하기 위하여 다음과 같이 여러 옵션들을 정의합니다. 아래 4가지를 제외한 나머지는 모두 기본값으로 선택합니다.\n Name = 임의의 이름 입력 Inspect = All query parameters 선택 Match Type = Contains XSS Injection Attacks 선택 Text Transformation = URL decode 선택   생성하려고하는 Rule 의 Default Action 이 Block 인 것을 확인한 후 \u0026ldquo;Add Rule\u0026rdquo; 버튼을 클릭합니다.  정상적으로 진행되는 경우 아래와 같이 새로운 Rule 생성이 되고 \u0026ldquo;Set rule priority\u0026rdquo; 화면으로 진행이 되게 되는데 별도의 Priority 설정이 필요 없으므로 \u0026ldquo;Save\u0026rdquo; 버튼을 클릭합니다.  Web ACLs 화면에서 \u0026ldquo;Rules\u0026rdquo; 탭을 클릭하여 새로운 Rule 이 생성된 것을 확인합니다. 아래 화면과 같이 생성된 Rule 이 80 WCU 을 점유하는 것을 확인합니다.  이제 SQL 공격을 차단할 수 있는 Rule 이 Web ACL 에 추가되었으므로 이전 과정에서 실행했던 XSS Injection 공격을 DVWA 화면에서 실행해보도록 하겠습니다.\n ALB DNS 주소를 통해 DVWA 화면에 접속한 후 이전 과정과 동일하게 XSS Injection(Reflected) 메뉴에서 아래의 XSS Injection 구문을 입력한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;    모든 설정이 정상적으로 이뤄졌다면 아래와 같이 이전 과정에서 차단되지 않았던 XSS Injection 구문이 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.   "
},
{
	"uri": "/mitigation.html",
	"title": "방어",
	"tags": [],
	"description": "",
	"content": " AWS WAF 를 이용하여 이전 실습에서 진행하였던 SQL Injection 공격과 XSS 공격을 차단하는 방법을 살펴보도록 하겠습니다. AWS WAF 에서 제공하는 국가별 IP 정책을 사용하여 특정 국가에서 유입되는 트래픽을 차단하는 방법을 살펴보도록 하겠습니다. AWS WAF 에서 제공하는 JSON Editor 를 이용하여 Rule 을 생성하고 적용하는 방법에 대해 살펴보도록 하겠습니다. "
},
{
	"uri": "/pre/_module3.html",
	"title": "Chrome Extention 설치",
	"tags": [],
	"description": "",
	"content": "AWS WAF 에서는 국가별 공인 IP 를 기준으로 트래픽을 허용/차단 하는 기능을 제공하고 있습니다. 랩 과정에서 지정된 국가를 차단하는 환경을 가상으로 구성하기위하여 Chrome 에서 사용할 수 있는 \u0026ldquo;Browsec VPN\u0026rdquo; 을 설치하도록 하겠습니다.\nChrome Store 링크를 클릭한 후 아래와 같이 Browsec Extension 을 선택한 후 \u0026ldquo;Add to Chrome\u0026rdquo; 버튼을 클릭합니다.\n아래와 같이 Extension 설치를 확인하는 확인창이 뜨면 \u0026ldquo;Add Extension\u0026rdquo; 을 클릭하여 설치를 계속합니다.\n설치된 Browsec VPN Exntension 은 이후 실습 과정에서 브라우저의 출발지 국가 정보를 변경하여 AWS WAF 의 국가별 차단 기능을 점검하는데 사용됩니다.\nBrowsec VPN Extension 은 사용자의 필요에 따라 Chrome 에서 실습 이후에도 사용하실 수 있으며 불필요한 경우 Lab 종료 이후에 삭제하시기 바랍니다.\n "
},
{
	"uri": "/mitigation/_module4.html",
	"title": "국가별 IP 차단",
	"tags": [],
	"description": "",
	"content": "이번에는 AWS WAF 에서 제공하는 국가별 IP 정보를 기준으로 특정 국가에서 유입되는 트래픽을 차단하는 실습을 진행하도록 하겠습니다.\n 차단 설정을 하기에 앞서 사용자의 PC 에서 발생하는 트래픽이 특정 국가에서 발생되는 것처럼 환경을 설정하기 위하여 이전 단계에서 설치하였던 Chrome Extension 을 사용하도록 하겠습니다.\n 크롬 브라우저에서 Browsec VPN 을 선택한 후 아래와 같이 \u0026ldquo;OFF\u0026rdquo; 를 \u0026ldquo;On\u0026rdquo; 으로 변경한 후 \u0026ldquo;Change\u0026rdquo; 버튼을 클릭하여 사용하고자하는 국가를 선택합니다.   Browsec 메뉴에서 Premium 으로 표기되어 있는 국가는 별도의 과금이 발생하는 국가이니 실습 과정에서는 반드시 무료 국가를 선택하시기 바랍니다.\n  본 실습에서는 Singapore 를 선택하도록 하겠습니다.  이제 Browsec 이 \u0026ldquo;On\u0026rdquo; 되어 있는 상태에서는 브라우저에서 발생하는 모든 트래픽은 Singapore 에서 발생되는 것처럼 트래픽이 전송되게 됩니다. 이 상태에서 DVWA 페이지가 정상적으로 접속이 되는지 확인합니다.\n 페이지가 정상적으로 접속이 된다면 이번에는 Singapore 에서 유입되는 트래픽을 차단하는 정책을 Web ACL 에 추가하도록 하겠습니다. Web ACL 에 새로운 Rule 을 추가하기 위하여 아래와 같이 선택한 Web ACL 의 상세 화면 중 상단의 \u0026ldquo;Rules\u0026rdquo; 를 선택한 후 화면 우측의 \u0026ldquo;Add rules\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 클릭하면 하위 메뉴를 확인할 수 있는데 하위 메뉴 중 \u0026ldquo;Add my own rules and rule groups\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 선택하면 새로운 WAF Rule 을 생성하거나 미리 만들어 둔 Rule Group 을 Web ACL 에 추가할 수 있습니다.\n   새로운 Rule 을 생성하기 위하여 다음과 같이 여러 옵션들을 정의합니다. 아래 3가지를 제외한 나머지는 모두 기본값으로 선택합니다.\n Name = 임의의 이름 입력 Inspect = Originates from a country in 선택 Country Codes = Singapore - SG 선택   생성하려고하는 Rule 의 Default Action 이 Block 인 것을 확인한 후 \u0026ldquo;Add Rule\u0026rdquo; 버튼을 클릭합니다.  정상적으로 진행되는 경우 아래와 같이 새로운 Rule 생성이 되고 \u0026ldquo;Set rule priority\u0026rdquo; 화면으로 진행이 되게 되는데 별도의 Priority 설정이 필요 없으므로 \u0026ldquo;Save\u0026rdquo; 버튼을 클릭합니다.  Web ACLs 화면에서 \u0026ldquo;Rules\u0026rdquo; 탭을 클릭하여 새로운 Rule 이 생성된 것을 확인합니다. 아래 화면과 같이 생성된 Rule 이 81 WCU 을 점유하는 것을 확인합니다.  이제 Singapore 에서 발생하는 트래픽을 차단할 수 있는 Rule 이 Web ACL 에 추가되었으므로 크롬 브라우저에서 다시 한 번 DVWA 로 접속해보도록 하겠습니다.\n 모든 설정이 정상적으로 이뤄졌다면 아래와 같이 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.  국가별 차단 기능을 확인하였으므로 Browsec 을 아래와 같이 \u0026ldquo;Off\u0026rdquo; 하도록 합니다.   "
},
{
	"uri": "/mitigation/_module5.html",
	"title": "JSON 기반 Rule 설정",
	"tags": [],
	"description": "",
	"content": "이번에는 AWS WAF v2 에서 새롭게 제공되는 Rule 설정 방식인 JSON 기반 Rule 생성을 해보도록 하겠습니다. 빠른 실습 진행을 위하여 지금까지 생성하였던 Rule 들을 삭제하고 동일한 Rule 을 JSON 기반으로 생성하도록 하겠습니다.\n먼저, 현재까지 생성된 Rule 을 JSON 기반 문서로 다운로드하기 위하여 아래와 같이 Web ACL 의 화면 우측 상단의 \u0026ldquo;Download web ACL as JSON\u0026rdquo; 버튼을 클릭한 후 파일을 저장합니다.  저장된 파일은 여러분들이 지금까지 실습을 진행하면서 생성하였던 Rule 정보들을 포함하고 있으며 별다른 추가 설정을 하지 않았다면 아래와 같은 내용을 담고 있습니다.\n{ \u0026quot;Name\u0026quot;: \u0026quot;MyWAF\u0026quot;, \u0026quot;Id\u0026quot;: \u0026quot;db5904b5-ccb4-4b6d-ac97-2711cb088072\u0026quot;, \u0026quot;ARN\u0026quot;: \u0026quot;arn:aws:wafv2:ap-northeast-2:852393119917:regional/webacl/MyWAF/db5904b5-ccb4-4b6d-ac97-2711cb088072\u0026quot;, \u0026quot;DefaultAction\u0026quot;: { \u0026quot;Allow\u0026quot;: {} }, \u0026quot;Description\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Rules\u0026quot;: [ { \u0026quot;Name\u0026quot;: \u0026quot;SG-Block\u0026quot;, \u0026quot;Priority\u0026quot;: 0, \u0026quot;Statement\u0026quot;: { \u0026quot;GeoMatchStatement\u0026quot;: { \u0026quot;CountryCodes\u0026quot;: [ \u0026quot;SG\u0026quot; ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;SG-Block\u0026quot; } }, { \u0026quot;Name\u0026quot;: \u0026quot;XSS-Rule\u0026quot;, \u0026quot;Priority\u0026quot;: 1, \u0026quot;Statement\u0026quot;: { \u0026quot;XssMatchStatement\u0026quot;: { \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;AllQueryArguments\u0026quot;: {} }, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;URL_DECODE\u0026quot; } ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;XSS-Rule\u0026quot; } }, { \u0026quot;Name\u0026quot;: \u0026quot;SQL-Ruie\u0026quot;, \u0026quot;Priority\u0026quot;: 2, \u0026quot;Statement\u0026quot;: { \u0026quot;SqliMatchStatement\u0026quot;: { \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;AllQueryArguments\u0026quot;: {} }, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;URL_DECODE\u0026quot; } ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;SQL-Ruie\u0026quot; } } ], \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;MyWAF\u0026quot; }, \u0026quot;Capacity\u0026quot;: 81 }  Rule 설정을 백업하였으니 이번에는 Web ACL 에서 사용하고 있는 Rule 들을 모두 삭제하도록 하겠습니다. Web ACL 의 Rules 탭으로 이동한 후 아래와 같이 현재 설정되어 있는 Rule 을 모두 선택한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다.  아래와 같이 Rule 삭제를 위하여 확인창이 나타나면 \u0026ldquo;delete\u0026rdquo; 를 입력해주고 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭하여 Rule 을 삭제합니다.  아래와 같이 모든 Rule 이 삭제된 상태에서 지금까지 사용했던 공격 방법 및 Singapore 에서의 접속 등이 모두 차단되지 않고 정상적으로 접속되는지 확인합니다.    이제 JSON 기반 Rule 설정을 해보도록 하겠습니다. 아래와 같이 새로운 Rule 을 추가하기 위하여 \u0026ldquo;Add my own rules and rule gruops\u0026rdquo; 버튼을 클릭합니다.  JSON 기반의 Rule 설정을 하기 위해서 Rule Builder 를 아래 화면과 같이 \u0026ldquo;Rule JSON editor\u0026rdquo; 를 선택합니다.  JSON 구문을 넣는 곳에 아래의 Rule 을 복사하여 붙여넣기 한 후 \u0026ldquo;Validate\u0026rdquo; 버튼을 클릭하여 문법에 이상이 없는지 확인합니다. \u0026ldquo;Rule is valid\u0026rdquo; 라는 문구를 확인하였다면 화면 하단의 \u0026ldquo;Add Rule\u0026rdquo; 버튼을 클릭하여 JSON 기반의 Rule 을 추가합니다.\n{ \u0026quot;Name\u0026quot;: \u0026quot;SG-Block\u0026quot;, \u0026quot;Priority\u0026quot;: 0, \u0026quot;Statement\u0026quot;: { \u0026quot;GeoMatchStatement\u0026quot;: { \u0026quot;CountryCodes\u0026quot;: [ \u0026quot;SG\u0026quot; ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;SG-Block\u0026quot; } }  첫번째 Rule 생성에 성공하였다면 2번쨰로 아래의 JSON Rule 을 이용하여 XSS-Rule 을 생성합니다.\n{ \u0026quot;Name\u0026quot;: \u0026quot;XSS-Rule\u0026quot;, \u0026quot;Priority\u0026quot;: 1, \u0026quot;Statement\u0026quot;: { \u0026quot;XssMatchStatement\u0026quot;: { \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;AllQueryArguments\u0026quot;: {} }, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;URL_DECODE\u0026quot; } ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;XSS-Rule\u0026quot; } }  마지막으로 아래의 JSON Rule 을 이용하여 XSS-Rule 을 생성합니다.\n{ \u0026quot;Name\u0026quot;: \u0026quot;SQL-Ruie\u0026quot;, \u0026quot;Priority\u0026quot;: 2, \u0026quot;Statement\u0026quot;: { \u0026quot;SqliMatchStatement\u0026quot;: { \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;AllQueryArguments\u0026quot;: {} }, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;URL_DECODE\u0026quot; } ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;SQL-Ruie\u0026quot; } }  아래와 같이 모든 Rule 의 생성이 완료되었다면 이전 실습과정에서 진행하였던 SQL Injection 공격, XSS 공격, Singapore 에서의 IP 등이 모두 정상적으로 차단되는지 확인합니다.   "
},
{
	"uri": "/post.html",
	"title": "실습 구성 요소 삭제",
	"tags": [],
	"description": "",
	"content": "수고하셨습니다!!.\n마지막으로 실습에 사용된 AWS 자원들을 삭제하는 시간입니다.\n실습을 진행하면서 사용된 AWS 자원은 미사용시에도 과금이 발생할 수 있기 때문에 반드시 안내되는 절차에 따라 삭제하셔야 합니다.\n  Report an issue   Learn more  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]